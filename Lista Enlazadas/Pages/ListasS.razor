@page "/eliminarS"
@using Lista_Enlazadas.Server;
<PageTitle>Eliminar Simplemente Enlazada</PageTitle>
<h1 style="text-align: center">Eliminar en Listas Simplemente Enlazadas</h1>

<input type="text" @bind="valor" class="form-control" placeholder="Ingrese un Valor" />
<br />
<button @onclick="AgregarInicio" class="btn"
        style="background-color: rgb(180, 0, 0); border-color: rgb(180, 0, 0); color: white;">
    Insertar Nodo Al Inicio
</button>
<br />
<br />
<button @onclick="EliminarInicio" class="btn"
        style="background-color: rgb(180, 0, 0); border-color: rgb(180, 0, 0); color: white;">
    Eliminar Nodo Al Inicio
</button>
<button @onclick="EliminarFinal" class="btn"
        style="background-color: rgb(180, 0, 0); border-color: rgb(180, 0, 0); color: white;">
    Eliminar Nodo Al Final
</button>
<br />
<br />
<input type="text" @bind="valorBusqueda" class="form-control" placeholder="Valor de referencia" />
<br />
<br />
<button @onclick="EliminiarNodoAntesX" class="btn"
        style="background-color: rgb(180, 0, 0); border-color: rgb(180, 0, 0); color: white;">
    Eliminar antes de un Dato X
</button>
<button @onclick="EliminarNodoDespuesX" class="btn"
        style="background-color: rgb(180, 0, 0); border-color: rgb(180, 0, 0); color: white;">
    Eliminar después de un Dato X
</button>
<button @onclick="BuscarElemento" class="btn"
        style="background-color: rgb(0, 89, 170); border-color: rgb(0, 89, 170); color: white;">
    Buscar Elemento
</button>
<br />
<br />
<input type="text" @bind="posicionStr" class="form-control" placeholder="Posición" />
<br />
<button @onclick="EliminarEnPosicion" class="btn"
        style="background-color: rgb(180, 0, 0); border-color: rgb(180, 0, 0); color: white;">
    Eliminar en Posición
</button>
<br />
<br />
<button @onclick="OrdenarLista" class="btn"
        style="background-color: rgb(0, 89, 170); border-color: rgb(0, 89, 170); color: white;">
    Ordenar Lista
</button>

<br />

<p>@mensaje</p>

<ul class="list-group">
    @{
        Nodo nodoTemporal = Lista.PrimerNodo;
        while (nodoTemporal != null)
        {
            <li class="list-group-item">@nodoTemporal.Informacion</li>
            nodoTemporal = nodoTemporal.Referencia;
        }
    }
</ul>
<br />
<br />
<button @onclick="VaciarLista" class="btn btn-primary">Vaciar Lista</button>

@code {
    public string valor { get; set; }
    public string valorBusqueda { get; set; }
    public string posicionStr { get; set; }
    public string mensaje { get; set; }
    public LES Lista { get; set; }

    protected override void OnInitialized()
    {
        Lista = new LES();
        base.OnInitialized();
    }

    Nodo crearNodo()
    {
        return new Nodo(valor);
    }
    public void AgregarInicio()
    {
        mensaje = Lista.AgregarNodoInicio(crearNodo());
    }

    public void EliminarInicio()
    {
        mensaje = Lista.EliminarNodoInicio();
    }

    public void EliminarFinal()
    {
        mensaje = Lista.EliminarNodoFinal();
    }

    public void EliminiarNodoAntesX()
    {
        mensaje = Lista.EliminiarAntesX(valorBusqueda);
    }

    public void EliminarNodoDespuesX()
    {
        mensaje = Lista.EliminarDespuesDatoX(valorBusqueda);
    }

    public void EliminarEnPosicion()
    {
        if (int.TryParse(posicionStr, out int posicion))
        {
            mensaje = Lista.EliminarEnPosicion(posicion);
        }
        else
        {
            mensaje = "Posición inválida";
        }
    }

    public void BuscarElemento()
    {
        var nodo = Lista.BuscarElemento(valorBusqueda);
        mensaje = nodo != null ? $"Elemento encontrado: {nodo.Informacion}" : "Elemento no encontrado";
    }

    public void OrdenarLista()
    {
        mensaje = Lista.OrdenarLista();
    }

    public void VaciarLista()
    {
        mensaje = Lista.VaciarLista();
    }


}